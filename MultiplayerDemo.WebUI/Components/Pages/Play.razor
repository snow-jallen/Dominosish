@page "/play"
@using KristofferStrube.Blazor.Confetti
@inject NavigationManager NavigationManager
@inject ConfettiService confetti
@inject ILogger<Play> logger

@if (me is null)
{
    <div>There is no player @PlayerName</div>
}
else if(!game.IsGameOver)
{
    <h3>Play for @me.Name</h3>

    <div class="row">
        <div class="col-4">
            <h4>My Tiles</h4>
            @foreach (var tile in me.Tiles)
            {
                <p @onclick=@(()=>playTile(tile))>@tile.Num1 &nbsp;&nbsp;|&nbsp;&nbsp; @tile.Num2</p>
            }
        </div>
        <div class="col-4">
            <h4>Game Board</h4>
            @foreach (var tile in game.Board)
            {
                <p>@tile.Num1 &nbsp;&nbsp;|&nbsp;&nbsp; @tile.Num2</p>
            }
        </div>
        <div class="col-4">
            @if (other is null)
            {
                <div>Waiting for another player...</div>
            }
            else
            {
                <h4>@other.Name's Tiles</h4>
                foreach (var tile in other.Tiles)
                {
                    <p>X &nbsp;&nbsp;|&nbsp;&nbsp; X</p>
                }
            }
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <h4>Errors</h4>
        </div>
        @foreach (var error in errors)
        {
            <div>@error</div>
        }
    </div>
}
else
{
    <h3>Game Over</h3>
    @if(game.Player1.Tiles.Count == game.Player2.Tiles.Count)
    {
        <h4 class="tie">It's a tie!</h4>
    }
    else if(game.Winner == other)
    {
        <h4 class="lose">You lose :-(</h4>
    }
    else
    {
        <h4 class="win">You win!</h4>
    }
    <button @onclick="playAgain">Play Again</button>
}

@code {
    Game? game
    {
        get
        {
            if(GameId is null)
               return null;

            try
            {
                return GameHost.Instance.Games[GameId.Value];
            }
            catch
            {
                NavigationManager.NavigateTo("/");
            }
            return null;
        }
    }
    Player? me;
    Player? other;
    List<string> errors = new();

    [SupplyParameterFromQuery]
    public int? GameId{get;set;}

    [SupplyParameterFromQuery]
    public string PlayerName { get; set; }

    protected override void OnParametersSet()
    {
        game.GameStateChanged += () =>
        {
            if (other is null)
            {
                other = game.Player1 == me ? 
                    game.Player2 : 
                    game.Player1;
            }
            if(game.Winner is not null && game.Winner == me)
            {
                logger.LogInformation("I won!!!  [show the confetti!]");
                confetti.Activate(new());
            }
            InvokeAsync(StateHasChanged);
        };

        game.GameReset += () =>
        {
            NavigationManager.NavigateTo("/");
        };

        me = game.Player1?.Name == PlayerName ? game.Player1 : game.Player2?.Name == PlayerName ? game.Player2 : null;
        other = game.Player1 == me ? game.Player2 : game.Player1;
        errors.Clear();
    }

    void playTile(Tile t)
    {
        try
        {
            game.PlayTile(me, t);
        }
        catch (InvalidMoveException)
        {
            errors.Add($"You cannot play {t} on {game.Board.Last()}");
        }
    }

    void playAgain()
    {
        game.Reset();
    }
}
